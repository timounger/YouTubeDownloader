#------------------------------------------------------------------------------
# Central YouTubeDownloader GitHub CI
# Doc: https://docs.github.com/de/actions
#------------------------------------------------------------------------------
name: YouTubeDownloader CI

#------------------------------------------------------------------------------
# Token Permission
#------------------------------------------------------------------------------
permissions:
  actions: write
  checks: none
  contents: write
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: write
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none

defaults:
  run:
    shell: cmd

env:
  PYTHON_VERSION: 3.10.10
  PYTHON_ARCH: x64
  PYTHON_PACKAGE_INST_PATH: ./Documentation/Installation
  PYTHON_PACKAGE_INST_FILE: install_packages.bat
  DOXYGEN_OUTPUT_NAME: Output_Doxygen
  DOXYGEN_OUTPUT_PATH: ./Documentation/DoxygenCreator/Output_Doxygen
  BINARY_EXE_NAME: bin_Exe
  BINARY_SETUP_NAME: bin_Setup
  BINARY_PATH: ./Executable/bin

#--------------------------------------------------------------------------------
# WORKFLOW TRIGGER
#--------------------------------------------------------------------------------
on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab
    inputs:
      documentation:
        description: 'Documentation'
        type: choice
        default: check
        options:
          - none
          - check
          - publish
          - clean publish
      test:
        description: 'Test'
        type: choice
        default: static
        options:
          - none
          - static
      build:
        description: 'Build'
        type: choice
        default: setup
        options:
          - none
          - exe
          - setup
      create_release:
        description: 'Create Release. All jobs are executed.'
        type: boolean
        default: false

#--------------------------------------------------------------------------------
# WORKFLOW JOBS
#--------------------------------------------------------------------------------
jobs:
  doc-Doxygen:
    if: inputs.documentation != 'none' || inputs.create_release
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ env.PYTHON_ARCH }}
      - name: Install Graphviz
        run: choco install graphviz
      - name: Install Packages
        working-directory: ${{ env.PYTHON_PACKAGE_INST_PATH }}
        run: ${{ env.PYTHON_PACKAGE_INST_FILE }}
      - name: Run Doxygen
        working-directory: ./Documentation/DoxygenCreator
        run: python doxygen_creator.py
      - name: Upload Doxygen Output
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DOXYGEN_OUTPUT_NAME }}
          path: ${{ env.DOXYGEN_OUTPUT_PATH }}
#------------------------------------------------------------------------------
  doc-Pages:
    if: inputs.documentation == 'publish' || inputs.documentation == 'clean publish' || inputs.create_release
    needs: doc-Doxygen
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Doxygen Output
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.DOXYGEN_OUTPUT_NAME }}
          path: ${{ env.DOXYGEN_OUTPUT_PATH }}
      - name: Delete gh-pages branch
        if: inputs.documentation == 'clean publish'
        run: |
          git checkout gh-pages
          git push origin --delete gh-pages
      - name: Deploy to Github Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.DOXYGEN_OUTPUT_PATH }}/html
#------------------------------------------------------------------------------
  test-PyLint:
    if: inputs.test == 'static' || inputs.build != 'none' || inputs.create_release
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ env.PYTHON_ARCH }}
      - name: Install Packages
        working-directory: ${{ env.PYTHON_PACKAGE_INST_PATH }}
        run: ${{ env.PYTHON_PACKAGE_INST_FILE }}
      - name: Run PyLint
        working-directory: ./Test
        run: run_pylint.bat
      - name: Upload PyLint report
        uses: actions/upload-artifact@v3
        with:
          name: pylint_YouTubeDownloader.log
          path: ./Test/pylint_YouTubeDownloader.log
#------------------------------------------------------------------------------
  build-Exe:
    if: inputs.build != 'none' || inputs.create_release
    needs: [test-PyLint]
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ env.PYTHON_ARCH }}
      - name: Install Packages
        working-directory: ${{ env.PYTHON_PACKAGE_INST_PATH }}
        run: ${{ env.PYTHON_PACKAGE_INST_FILE }}
      - name: Build Executable
        working-directory: ./Executable
        run: generate_executable.bat
      - name: Upload Executable
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_EXE_NAME }}
          path: ${{ env.BINARY_PATH }}
#------------------------------------------------------------------------------
  build-Setup:
    needs: build-Exe
    if: inputs.build == 'setup' || inputs.create_release
    runs-on: windows-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Executable
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BINARY_EXE_NAME }}
          path: ${{ env.BINARY_PATH }}
      - name: Build Setup
        working-directory: ./Executable
        run: generate_setup.bat
      - name: Delete Executable file
        run: |
          rm -f ${{ env.BINARY_PATH }}/YouTubeDownloader.exe
      - name: Upload Setup
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BINARY_SETUP_NAME }}
          path: ${{ env.BINARY_PATH }}
#------------------------------------------------------------------------------
  create-Release:
    if: inputs.create_release
    needs: build-Setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Setup
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BINARY_SETUP_NAME }}
          path: ${{ env.BINARY_PATH }}
      - name: Get Commit Message
        shell: bash
        run: echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_ENV
      - name: Get version from Python file
        shell: bash
        run: |
          version=$(python -c 'from Source.version import __version__; print(__version__)')
          echo "file_version=${version}" >> $GITHUB_ENV
      - name: Create tag
        shell: bash
        run: |
          tag_name="${{ env.file_version }}"
          git tag "$tag_name"
          git push origin "$tag_name"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.file_version }}
          release_name: "[YouTubeDownloader] ${{ env.file_version }}"
          body: ${{ env.commit_message }}
          draft: false
          prerelease: false
      - name: Upload Setup files to release assets
        shell: bash
        run: |
          for file in ${{ env.BINARY_PATH }}/*; do
            filename=$(basename "$file")
            curl -X POST "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$filename" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $(file -b --mime-type $file)" \
              --data-binary @"$file"
          done
